#summary New folder organization and naming convention

<wiki:toc max_depth="2" />

= New names for libraries and executables =

In order to make the openjpeg project libraries and executables more consistent, we plan to rename some of them. The current proposal is the following (italic indicate optional dependencies).

== Libraries ==

|| *name* || *description* || *dependencies* || *remarks* ||
|| libopenjpeg || basic J2K/JP2 library || none || Rename to "libopenjp2k" to disambiguate from JPEG format ? or is it too late ? MM: I do not like 'jp2k' since we either talk about j2k or jp2... ||
|| libopenjpwl || basic J2K/JP2 library with JPWL capabilities || none || ||
|| libopenjpip || JPIP library || none || ||
|| libopenjp3d || JP3D library || none || ||
|| libopenjpegjni || OpenJPEG Java binding || libopenjpeg || ||

== Executables ==

|| *name* || *description* || *dependencies* || *remarks* ||
|| opj_compress || was: image_to_j2k || libopenjpeg, _libtiff_, _libpng_, _liblcms_ || ||
|| opj_decompress || was: j2k_to_image || libopenjpeg, _libtiff_, _libpng_, _liblcms_ || ||
|| opj_dump || was: j2k_dump || libopenjpeg, _libtiff_, _libpng_, _liblcms_ || ||
|| opj_jpwl_compress || was: JPWL_image_to_j2k || libopenjpwl, _libtiff_, _libpng_, _liblcms_ || ||
|| opj_jpwl_decompress || was: JPWL_j2k_to_image || libopenjpwl, _libtiff_, _libpng_, _liblcms_ || ||
|| opj_server || JPIP server || libopenjpeg, libopenjpip_server, libfastcgi || ||
|| opj_dec_server || JPIP decoding server || libopenjpeg, libopenjpip_local || ||
|| opj_jpip_viewer || was: opj_viewer ; JAVA JPIP viewer || none || technically there are actually two viewers: opj_viewer and opj_xerces_viewer, this is confusing for user, we should build one and only one depending whether or not user wants xerces (and found on system). ||
|| opj_viewer || was: OPJviewer ; JAVA viewer || libopenjpeg || should be merged with opj_jpip_viewer||
|| opj_mj2_compress || was: frames_to_mj2 || libopenjpeg || currently, it does not use the openjpeg API correctly ||
|| opj_mj2_decompress || was: mj2_to_frames || libopenjpeg || currently, it does not use the openjpeg API correctly ||
|| opj_mj2_extract || was: extract_j2k_from_mj2 || libopenjpeg || currently, it does not use the openjpeg API correctly ||
|| opj_mj2_wrap || was: wrap_j2k_in_mj2 || libopenjpeg || currently, it does not use the openjpeg API correctly ||
|| opj_test_index || was: test_index || libopenjpeg || ||
|| opj_addxml || was: addXMLinJP2 || libopenjpeg || ||
|| removed !  || was: jpip_to_j2k || libopenjpeg || ||replaced by image_to_j2k -jpip
|| removed ! || was: jpip_to_jp2 || libopenjpeg || ||replaced by image_to_j2k -jpip

= New directory structure =

A new directory structure is also proposed for the svn repository. Based on Vincent Torri suggestion+Addition from Mathieu Malaterre, here is the current proposal : 

  * openjpeg
    * src/  (where the code for the libraries are located)
      * openjpeg/
      * openjpip/
      * openjpwl/
      * openjp3d/
    * apps/ (where the code of binaries are located)
      * common/ [opj_dump, ...]
      * jp2/ [opj_compress, opj_decompress]
      * jpwl [opj_jpwl_compress, opj_jpwl_decompress]
      * mj2 [opj_mj2_compress, opj_mj2_decompress, opj_mj2_extract, opj_mj2_wrap]
      * jpip [opj_server, opj_dec_server]
        * java/ [opj_jpip_viewer]
      * wx
        * opj_viewer/ [will need C++ compiler]
      * jp3d [??? ]
    * cmake/
    * m4/
    * doc/
    * tests/
      * apps/
      * src/
    * thirdparty/

Remaining questions : 
  * Where do we put the code of thirdparty libraries, as only executables depend on them ?
  * Another proposal is to create different projects : openjpeg, openjpip, openjp3d, each with its 'branches', 'trunk' and 'tags' folders. Good idea ?